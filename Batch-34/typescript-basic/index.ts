//c√∫ ph√°p khai b√°o bi·∫øn trong TS
//let [t√™n bi·∫øn]: [ki·ªÉu d·ªØ li·ªáu c·ªßa bi·∫øn]  = gi√° tr·ªã c·ªßa bi·∫øn
let age: number = 15; //number

let myName: string = 'John'; //string

const isStudent: boolean = false; //boolean

//T·ª©c l√† bi·∫øn myAny ch∆∞a x√°c ƒë·ªãnh ƒë∆∞·ª£c ki·ªÉu d·ªØ li·ªáu
let myAny: any;

myAny = 'string';
myAny = 12;
myAny = true;
//v·ªõi any  b·∫°n c√≥ th·ªÉ thay ƒë·ªïi ki·ªÉu gi·ªØ li·ªáu cho gi√° tr·ªã c·ªßa bi·∫øn

let myArr: string[] = ['banana', 'orange'];
/*
Khi kh√°i b√°o nh∆∞ tr√™n th√¨
Hi·ªÉu l√† m·∫£ng tr√™n ch·ªâ ch·∫•p nh·∫≠n, gi√° tr·ªã
c·ªßa c√°c ph·∫ßn t·ª≠ b√™n trong n√≥ l√† STRING th√¥i
*/
//myArr[2] = 1;//sai
myArr[2] = 'lemon';

let myArrNum: number[] = [1,2,3,4];
//myArrNum[5] = 'John'; sai
myArrNum[5] = 5; //ƒë√∫ng


//Ki·ªÉu m·∫£ng h·ªïn h·ª£p trong JS
//TH√å trong TS n√≥ c√≥ t√™n g·ªçi l√† Tuple

let myArrComplex: [string, string, number, number, boolean, boolean]

myArrComplex = ['banana', 'orange', 1, 3,true, false]

//Object
type CarType = {
    type: string,
    model: string,
    year: number
}

// let car : {type: string, model: string, year: number} = {
//     type: "Toyota",
//     model: "Corolla",
//     year: 2009
// };

let car : CarType = {
    type: "Toyota",
    model: "Corolla",
    year: 2009
};

//interface 

interface CarTypeBase {
    type: string;
    model: string;
    year: number;
}

interface CarContainer extends CarTypeBase {
    weight: string; //10 t·∫•n
    cod: boolean;
}

let CarContainer : CarContainer = {
    type: "Toyota",
    model: "Corolla",
    year: 2009,
    weight: '10T', //10 t·∫•n
    cod: true
};

//Function
//void l√† ki·ªÉu d·ªØ li·ªáu cho m·ªôt h√†m kh√¥ng return
//string: ki·ªÉu d·ªØ li·ªáu c·ªßa bi·∫øn name
function helloName(name:string): void
{
    console.log('<<=== üöÄ Hello ===>>',name);
}

const helloNameV3 = (name: string) => console.log('<<=== üöÄ Hello ===>>',name);

helloName('hello');

function helloNameV2(name: string = 'Aptech'): void
{
    console.log('<<=== üöÄ Hello ===>>',name);
}
helloNameV2()

/**
 * ƒê·ªÉ ch·∫Øc ch·∫Øn b·∫°n mu·ªën nh·∫≠n l·∫°i m·ªôt k·∫øt qu·∫£ l√† s·ªë cho ph√©p
 * t√≠nh t·ªïng th√¨ b·∫°n c·∫ßn khai b√°o th√™m ki·ªÉu d·ªØ li·ªáu tr·∫£ v·ªÅ cho return
 */
// const calSum = (a:number,b:number) : string => {
//     return `${a} + ${b}`
// }

const calSum = (a:number,b:number) : number => {
    return a + b
}
//short hand khi ch·ªâ return c√≥ 1 d√≤ng code
const calSumV2 = (a:number,b:number) : number =>  a + b;


calSum(1,2);

const getProfile = (name: string, age:number, gender: string)=> {
    let msg = `Name: ${name} - Age: ${age} - Gender: ${gender}`
}

const myProfile = {name: 'Jonh', age: 18, myGender: 'male'};

type Profile = {name: string, age:number, myGender: string}

const getProfileV2 = ( myProfile: Profile)=> {
    let msg = `Name: ${name} - Age: ${age} - Gender: ${myGender}`;
    console.log(msg);
}
getProfileV2(myProfile);
